{"ts":1379301989200,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1379301993528,"patch":[[{"diffs":[[1,"// vim:ts=4:sts=4:sw=4:\r\n/*!\r\n *\r\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\r\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\r\n *\r\n * With parts by Tyler Close\r\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\r\n * at http://www.opensource.org/licenses/mit-license.html\r\n * Forked at ref_send.js version: 2009-05-11\r\n *\r\n * With parts by Mark Miller\r\n * Copyright (C) 2011 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\n(function (definition) {\r\n    // Turn off strict mode for this function so we can assign to global.Q\r\n    /* jshint strict: false */\r\n\r\n    // This file will function properly as a <script> tag, or a module\r\n    // using CommonJS and NodeJS or RequireJS module formats.  In\r\n    // Common/Node/RequireJS, the module exports the Q API and when\r\n    // executed as a simple <script>, it creates a Q global instead.\r\n\r\n    // Montage Require\r\n    if (typeof bootstrap === \"function\") {\r\n        bootstrap(\"promise\", definition);\r\n\r\n    // CommonJS\r\n    } else if (typeof exports === \"object\") {\r\n        module.exports = definition();\r\n\r\n    // RequireJS\r\n    } else if (typeof define === \"function\" && define.amd) {\r\n        define(definition);\r\n\r\n    // SES (Secure EcmaScript)\r\n    } else if (typeof ses !== \"undefined\") {\r\n        if (!ses.ok()) {\r\n            return;\r\n        } else {\r\n            ses.makeQ = definition;\r\n        }\r\n\r\n    // <script>\r\n    } else {\r\n        Q = definition();\r\n    }\r\n\r\n})(function () {\r\n\"use strict\";\r\n\r\nvar hasStacks = false;\r\ntry {\r\n    throw new Error();\r\n} catch (e) {\r\n    hasStacks = !!e.stack;\r\n}\r\n\r\n// All code after this point will be filtered from stack traces reported\r\n// by Q.\r\nvar qStartingLine = captureLine();\r\nvar qFileName;\r\n\r\n// shims\r\n\r\n// used for fallback in \"allResolved\"\r\nvar noop = function () {};\r\n\r\n// Use the fastest possible means to execute a task in a future turn\r\n// of the event loop.\r\nvar nextTick =(function () {\r\n    // linked list of tasks (single, with head node)\r\n    var head = {task: void 0, next: null};\r\n    var tail = head;\r\n    var flushing = false;\r\n    var requestTick = void 0;\r\n    var isNodeJS = false;\r\n\r\n    function flush() {\r\n        /* jshint loopfunc: true */\r\n\r\n        while (head.next) {\r\n            head = head.next;\r\n            var task = head.task;\r\n            head.task = void 0;\r\n            var domain = head.domain;\r\n\r\n            if (domain) {\r\n                head.domain = void 0;\r\n                domain.enter();\r\n            }\r\n\r\n            try {\r\n                task();\r\n\r\n            } catch (e) {\r\n                if (isNodeJS) {\r\n                    // In node, uncaught exceptions are considered fatal errors.\r\n                    // Re-throw them synchronously to interrupt flushing!\r\n\r\n                    // Ensure continuation if the uncaught exception is suppressed\r\n                    // listening \"uncaughtException\" events (as domains does).\r\n                    // Continue in next event to avoid tick recursion.\r\n                    if (domain) {\r\n                        domain.exit();\r\n                    }\r\n                    setTimeout(flush, 0);\r\n                    if (domain) {\r\n                        domain.enter();\r\n                    }\r\n\r\n                    throw e;\r\n\r\n                } else {\r\n                    // In browsers, uncaught exceptions are not fatal.\r\n                    // Re-throw them asynchronously to avoid slow-downs.\r\n                    setTimeout(function() {\r\n                       throw e;\r\n                    }, 0);\r\n                }\r\n            }\r\n\r\n            if (domain) {\r\n                domain.exit();\r\n            }\r\n        }\r\n\r\n        flushing = false;\r\n    }\r\n\r\n    nextTick = function (task) {\r\n        tail = tail.next = {\r\n            task: task,\r\n            domain: isNodeJS && process.domain,\r\n            next: null\r\n        };\r\n\r\n        if (!flushing) {\r\n            flushing = true;\r\n            requestTick();\r\n        }\r\n    };\r\n\r\n    if (typeof process !== \"undefined\" && process.nextTick) {\r\n        // Node.js before 0.9. Note that some fake-Node environments, like the\r\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\r\n        isNodeJS = true;\r\n\r\n        requestTick = function () {\r\n            process.nextTick(flush);\r\n        };\r\n\r\n    } else if (typeof setImmediate === \"function\") {\r\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\r\n        if (typeof window !== \"undefined\") {\r\n            requestTick = setImmediate.bind(window, flush);\r\n        } else {\r\n            requestTick = function () {\r\n                setImmediate(flush);\r\n            };\r\n        }\r\n\r\n    } else if (typeof MessageChannel !== \"undefined\") {\r\n        // modern browsers\r\n        // http://www.nonblocking.io/2011/06/windownexttick.html\r\n        var channel = new MessageChannel();\r\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\r\n        // working message ports the first time a page loads.\r\n        channel.port1.onmessage = function () {\r\n            requestTick = requestPortTick;\r\n            channel.port1.onmessage = flush;\r\n            flush();\r\n        };\r\n        var requestPortTick = function () {\r\n            // Opera requires us to provide a message payload, regardless of\r\n            // whether we use it.\r\n            channel.port2.postMessage(0);\r\n        };\r\n        requestTick = function () {\r\n            setTimeout(flush, 0);\r\n            requestPortTick();\r\n        };\r\n\r\n    } else {\r\n        // old browsers\r\n        requestTick = function () {\r\n            setTimeout(flush, 0);\r\n        };\r\n    }\r\n\r\n    return nextTick;\r\n})();\r\n\r\n// Attempt to make generics safe in the face of downstream\r\n// modifications.\r\n// There is no situation where this is necessary.\r\n// If you need a security guarantee, these primordials need to be\r\n// deeply frozen anyway, and if you don’t need a security guarantee,\r\n// this is just plain paranoid.\r\n// However, this does have the nice side-effect of reducing the size\r\n// of the code by reducing x.call() to merely x(), eliminating many\r\n// hard-to-minify characters.\r\n// See Mark Miller’s explanation of what this does.\r\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\r\nvar call = Function.call;\r\nfunction uncurryThis(f) {\r\n    return function () {\r\n        return call.apply(f, arguments);\r\n    };\r\n}\r\n// This is equivalent, but slower:\r\n// uncurryThis = Function_bind.bind(Function_bind.call);\r\n// http://jsperf.com/uncurrythis\r\n\r\nvar array_slice = uncurryThis(Array.prototype.slice);\r\n\r\nvar array_reduce = uncurryThis(\r\n    Array.prototype.reduce || function (callback, basis) {\r\n        var index = 0,\r\n            length = this.length;\r\n        // concerning the initial value, if one is not provided\r\n        if (arguments.length === 1) {\r\n            // seek to the first value in the array, accounting\r\n            // for the possibility that is is a sparse array\r\n            do {\r\n                if (index in this) {\r\n                    basis = this[index++];\r\n                    break;\r\n                }\r\n                if (++index >= length) {\r\n                    throw new TypeError();\r\n                }\r\n            } while (1);\r\n        }\r\n        // reduce\r\n        for (; index < length; index++) {\r\n            // account for the possibility that the array is sparse\r\n            if (index in this) {\r\n                basis = callback(basis, this[index], index);\r\n            }\r\n        }\r\n        return basis;\r\n    }\r\n);\r\n\r\nvar array_indexOf = uncurryThis(\r\n    Array.prototype.indexOf || function (value) {\r\n        // not a very good shim, but good enough for our one use of it\r\n        for (var i = 0; i < this.length; i++) {\r\n            if (this[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n);\r\n\r\nvar array_map = uncurryThis(\r\n    Array.prototype.map || function (callback, thisp) {\r\n        var self = this;\r\n        var collect = [];\r\n        array_reduce(self, function (undefined, value, index) {\r\n            collect.push(callback.call(thisp, value, index, self));\r\n        }, void 0);\r\n        return collect;\r\n    }\r\n);\r\n\r\nvar object_create = Object.create || function (prototype) {\r\n    function Type() { }\r\n    Type.prototype = prototype;\r\n    return new Type();\r\n};\r\n\r\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\r\n\r\nvar object_keys = Object.keys || function (object) {\r\n    var keys = [];\r\n    for (var key in object) {\r\n        if (object_hasOwnProperty(object, key)) {\r\n            keys.push(key);\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n\r\nvar object_toString = uncurryThis(Object.prototype.toString);\r\n\r\nfunction isObject(value) {\r\n    return value === Object(value);\r\n}\r\n\r\n// generator related shims\r\n\r\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\r\nfunction isStopIteration(exception) {\r\n    return (\r\n        object_toString(exception) === \"[object StopIteration]\" ||\r\n        exception instanceof QReturnValue\r\n    );\r\n}\r\n\r\n// FIXME: Remove this helper and Q.return once ES6 generators are in\r\n// SpiderMonkey.\r\nvar QReturnValue;\r\nif (typeof ReturnValue !== \"undefined\") {\r\n    QReturnValue = ReturnValue;\r\n} else {\r\n    QReturnValue = function (value) {\r\n        this.value = value;\r\n    };\r\n}\r\n\r\n// Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\r\n// engine that has a deployed base of browsers that support generators.\r\n// However, SM's generators use the Python-inspired semantics of\r\n// outdated ES6 drafts.  We would like to support ES6, but we'd also\r\n// like to make it possible to use generators in deployed browsers, so\r\n// we also support Python-style generators.  At some point we can remove\r\n// this block.\r\nvar hasES6Generators;\r\ntry {\r\n    /* jshint evil: true, nonew: false */\r\n    new Function(\"(function* (){ yield 1; })\");\r\n    hasES6Generators = true;\r\n} catch (e) {\r\n    hasES6Generators = false;\r\n}\r\n\r\n// long stack traces\r\n\r\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\r\n\r\nfunction makeStackTraceLong(error, promise) {\r\n    // If possible, transform the error stack trace by removing Node and Q\r\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\r\n    if (hasStacks &&\r\n        promise.stack &&\r\n        typeof error === \"object\" &&\r\n        error !== null &&\r\n        error.stack &&\r\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\r\n    ) {\r\n        var stacks = [];\r\n        for (var p = promise; !!p; p = p.source) {\r\n            if (p.stack) {\r\n                stacks.unshift(p.stack);\r\n            }\r\n        }\r\n        stacks.unshift(error.stack);\r\n\r\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\r\n        error.stack = filterStackString(concatedStacks);\r\n    }\r\n}\r\n\r\nfunction filterStackString(stackString) {\r\n    var lines = stackString.split(\"\\n\");\r\n    var desiredLines = [];\r\n    for (var i = 0; i < lines.length; ++i) {\r\n        var line = lines[i];\r\n\r\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\r\n            desiredLines.push(line);\r\n        }\r\n    }\r\n    return desiredLines.join(\"\\n\");\r\n}\r\n\r\nfunction isNodeFrame(stackLine) {\r\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\r\n           stackLine.indexOf(\"(node.js:\") !== -1;\r\n}\r\n\r\nfunction getFileNameAndLineNumber(stackLine) {\r\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\r\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\r\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\r\n    if (attempt1) {\r\n        return [attempt1[1], Number(attempt1[2])];\r\n    }\r\n\r\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\r\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\r\n    if (attempt2) {\r\n        return [attempt2[1], Number(attempt2[2])];\r\n    }\r\n\r\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\r\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\r\n    if (attempt3) {\r\n        return [attempt3[1], Number(attempt3[2])];\r\n    }\r\n}\r\n\r\nfunction isInternalFrame(stackLine) {\r\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\r\n\r\n    if (!fileNameAndLineNumber) {\r\n        return false;\r\n    }\r\n\r\n    var fileName = fileNameAndLineNumber[0];\r\n    var lineNumber = fileNameAndLineNumber[1];\r\n\r\n    return fileName === qFileName &&\r\n        lineNumber >= qStartingLine &&\r\n        lineNumber <= qEndingLine;\r\n}\r\n\r\n// discover own file name and line number range for filtering stack\r\n// traces\r\nfunction captureLine() {\r\n    if (!hasStacks) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        throw new Error();\r\n    } catch (e) {\r\n        var lines = e.stack.split(\"\\n\");\r\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\r\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\r\n        if (!fileNameAndLineNumber) {\r\n            return;\r\n        }\r\n\r\n        qFileName = fileNameAndLineNumber[0];\r\n        return fileNameAndLineNumber[1];\r\n    }\r\n}\r\n\r\nfunction deprecate(callback, name, alternative) {\r\n    return function () {\r\n        if (typeof console !== \"undefined\" &&\r\n            typeof console.warn === \"function\") {\r\n            console.warn(name + \" is deprecated, use \" + alternative +\r\n                         \" instead.\", new Error(\"\").stack);\r\n        }\r\n        return callback.apply(callback, arguments);\r\n    };\r\n}\r\n\r\n// end of shims\r\n// beginning of real work\r\n\r\n/**\r\n * Constructs a promise for an immediate reference, passes promises through, or\r\n * coerces promises from different systems.\r\n * @param value immediate reference or promise\r\n */\r\nfunction Q(value) {\r\n    // If the object is already a Promise, return it directly.  This enables\r\n    // the resolve function to both be used to created references from objects,\r\n    // but to tolerably coerce non-promises to promises.\r\n    if (isPromise(value)) {\r\n        return value;\r\n    }\r\n\r\n    // assimilate thenables\r\n    if (isPromiseAlike(value)) {\r\n        return coerce(value);\r\n    } else {\r\n        return fulfill(value);\r\n    }\r\n}\r\nQ.resolve = Q;\r\n\r\n/**\r\n * Performs a task in a future turn of the event loop.\r\n * @param {Function} task\r\n */\r\nQ.nextTick = nextTick;\r\n\r\n/**\r\n * Controls whether or not long stack traces will be on\r\n */\r\nQ.longStackSupport = false;\r\n\r\n/**\r\n * Constructs a {promise, resolve, reject} object.\r\n *\r\n * `resolve` is a callback to invoke with a more resolved value for the\r\n * promise. To fulfill the promise, invoke `resolve` with any value that is\r\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\r\n * thenable, or invoke `reject` with the reason directly. To resolve the\r\n * promise to another thenable, thus putting it in the same state, invoke\r\n * `resolve` with that other thenable.\r\n */\r\nQ.defer = defer;\r\nfunction defer() {\r\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\r\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\r\n    // element of the messages array is itself an array of complete arguments to\r\n    // forward to the resolved promise.  We coerce the resolution value to a\r\n    // promise using the `resolve` function because it handles both fully\r\n    // non-thenable values and other thenables gracefully.\r\n    var messages = [], progressListeners = [], resolvedPromise;\r\n\r\n    var deferred = object_create(defer.prototype);\r\n    var promise = object_create(Promise.prototype);\r\n\r\n    promise.promiseDispatch = function (resolve, op, operands) {\r\n        var args = array_slice(arguments);\r\n        if (messages) {\r\n            messages.push(args);\r\n            if (op === \"when\" && operands[1]) { // progress operand\r\n                progressListeners.push(operands[1]);\r\n            }\r\n        } else {\r\n            nextTick(function () {\r\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\r\n            });\r\n        }\r\n    };\r\n\r\n    // XXX deprecated\r\n    promise.valueOf = deprecate(function () {\r\n        if (messages) {\r\n            return promise;\r\n        }\r\n        var nearerValue = nearer(resolvedPromise);\r\n        if (isPromise(nearerValue)) {\r\n            resolvedPromise = nearerValue; // shorten chain\r\n        }\r\n        return nearerValue;\r\n    }, \"valueOf\", \"inspect\");\r\n\r\n    promise.inspect = function () {\r\n        if (!resolvedPromise) {\r\n            return { state: \"pending\" };\r\n        }\r\n        return resolvedPromise.inspect();\r\n    };\r\n\r\n    if (Q.longStackSupport && hasStacks) {\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\r\n            // accessor around; that causes memory leaks as per GH-111. Just\r\n            // reify the stack trace as a string ASAP.\r\n            //\r\n            // At the same time, cut off the first line; it's always just\r\n            // \"[object Promise]\\n\", as per the `toString`.\r\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\r\n        }\r\n    }\r\n\r\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\r\n    // consolidating them into `become`, since otherwise we'd create new\r\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\r\n\r\n    function become(newPromise) {\r\n        resolvedPromise = newPromise;\r\n        promise.source = newPromise;\r\n\r\n        array_reduce(messages, function (undefined, message) {\r\n            nextTick(function () {\r\n                newPromise.promiseDispatch.apply(newPromise, message);\r\n            });\r\n        }, void 0);\r\n\r\n        messages = void 0;\r\n        progressListeners = void 0;\r\n    }\r\n\r\n    deferred.promise = promise;\r\n    deferred.resolve = function (value) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(Q(value));\r\n    };\r\n\r\n    deferred.fulfill = function (value) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(fulfill(value));\r\n    };\r\n    deferred.reject = function (reason) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(reject(reason));\r\n    };\r\n    deferred.notify = function (progress) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        array_reduce(progressListeners, function (undefined, progressListener) {\r\n            nextTick(function () {\r\n                progressListener(progress);\r\n            });\r\n        }, void 0);\r\n    };\r\n\r\n    return deferred;\r\n}\r\n\r\n/**\r\n * Creates a Node-style callback that will resolve or reject the deferred\r\n * promise.\r\n * @returns a nodeback\r\n */\r\ndefer.prototype.makeNodeResolver = function () {\r\n    var self = this;\r\n    return function (error, value) {\r\n        if (error) {\r\n            self.reject(error);\r\n        } else if (arguments.length > 2) {\r\n            self.resolve(array_slice(arguments, 1));\r\n        } else {\r\n            self.resolve(value);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * @param resolver {Function} a function that returns nothing and accepts\r\n * the resolve, reject, and notify functions for a deferred.\r\n * @returns a promise that may be resolved with the given resolve and reject\r\n * functions, or rejected by a thrown exception in resolver\r\n */\r\nQ.promise = promise;\r\nfunction promise(resolver) {\r\n    if (typeof resolver !== \"function\") {\r\n        throw new TypeError(\"resolver must be a function.\");\r\n    }\r\n    var deferred = defer();\r\n    try {\r\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\r\n    } catch (reason) {\r\n        deferred.reject(reason);\r\n    }\r\n    return deferred.promise;\r\n}\r\n\r\n// XXX experimental.  This method is a way to denote that a local value is\r\n// serializable and should be immediately dispatched to a remote upon request,\r\n// instead of passing a reference.\r\nQ.passByCopy = function (object) {\r\n    //freeze(object);\r\n    //passByCopies.set(object, true);\r\n    return object;\r\n};\r\n\r\nPromise.prototype.passByCopy = function () {\r\n    //freeze(object);\r\n    //passByCopies.set(object, true);\r\n    return this;\r\n};\r\n\r\n/**\r\n * If two promises eventually fulfill to the same value, promises that value,\r\n * but otherwise rejects.\r\n * @param x {Any*}\r\n * @param y {Any*}\r\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\r\n * otherwise.\r\n *\r\n */\r\nQ.join = function (x, y) {\r\n    return Q(x).join(y);\r\n};\r\n\r\nPromise.prototype.join = function (that) {\r\n    return Q([this, that]).spread(function (x, y) {\r\n        if (x === y) {\r\n            // TODO: \"===\" should be Object.is or equiv\r\n            return x;\r\n        } else {\r\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns a promise for the first of an array of promises to become fulfilled.\r\n * @param answers {Array[Any*]} promises to race\r\n * @returns {Any*} the first promise to be fulfilled\r\n */\r\nQ.race = race;\r\nfunction race(answerPs) {\r\n    return promise(function(resolve, reject) {\r\n        // Switch to this once we can assume at least ES5\r\n        // answerPs.forEach(function(answerP) {\r\n        //     Q(answerP).then(resolve, reject);\r\n        // });\r\n        // Use this in the meantime\r\n        for (var i = 0, len = answerPs.length; i < len; i++) {\r\n            Q(answerPs[i]).then(resolve, reject);\r\n        }\r\n    });\r\n}\r\n\r\nPromise.prototype.race = function () {\r\n    return this.then(Q.race);\r\n};\r\n\r\n/**\r\n * Constructs a Promise with a promise descriptor object and optional fallback\r\n * function.  The descriptor contains methods like when(rejected), get(name),\r\n * set(name, value), post(name, args), and delete(name), which all\r\n * return either a value, a promise for a value, or a rejection.  The fallback\r\n * accepts the operation name, a resolver, and any further arguments that would\r\n * have been forwarded to the appropriate method above had a method been\r\n * provided with the proper name.  The API makes no guarantees about the nature\r\n * of the returned object, apart from that it is usable whereever promises are\r\n * bought and sold.\r\n */\r\nQ.makePromise = Promise;\r\nfunction Promise(descriptor, fallback, inspect) {\r\n    if (fallback === void 0) {\r\n        fallback = function (op) {\r\n            return reject(new Error(\r\n                \"Promise does not support operation: \" + op\r\n            ));\r\n        };\r\n    }\r\n    if (inspect === void 0) {\r\n        inspect = function () {\r\n            return {state: \"unknown\"};\r\n        };\r\n    }\r\n\r\n    var promise = object_create(Promise.prototype);\r\n\r\n    promise.promiseDispatch = function (resolve, op, args) {\r\n        var result;\r\n        try {\r\n            if (descriptor[op]) {\r\n                result = descriptor[op].apply(promise, args);\r\n            } else {\r\n                result = fallback.call(promise, op, args);\r\n            }\r\n        } catch (exception) {\r\n            result = reject(exception);\r\n        }\r\n        if (resolve) {\r\n            resolve(result);\r\n        }\r\n    };\r\n\r\n    promise.inspect = inspect;\r\n\r\n    // XXX deprecated `valueOf` and `exception` support\r\n    if (inspect) {\r\n        var inspected = inspect();\r\n        if (inspected.state === \"rejected\") {\r\n            promise.exception = inspected.reason;\r\n        }\r\n\r\n        promise.valueOf = deprecate(function () {\r\n            var inspected = inspect();\r\n            if (inspected.state === \"pending\" ||\r\n                inspected.state === \"rejected\") {\r\n                return promise;\r\n            }\r\n            return inspected.value;\r\n        });\r\n    }\r\n\r\n    return promise;\r\n}\r\n\r\nPromise.prototype.toString = function () {\r\n    return \"[object Promise]\";\r\n};\r\n\r\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\r\n    var self = this;\r\n    var deferred = defer();\r\n    var done = false;   // ensure the untrusted promise makes at most a\r\n                        // single call to one of the callbacks\r\n\r\n    function _fulfilled(value) {\r\n        try {\r\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\r\n        } catch (exception) {\r\n            return reject(exception);\r\n        }\r\n    }\r\n\r\n    function _rejected(exception) {\r\n        if (typeof rejected === \"function\") {\r\n            makeStackTraceLong(exception, self);\r\n            try {\r\n                return rejected(exception);\r\n            } catch (newException) {\r\n                return reject(newException);\r\n            }\r\n        }\r\n        return reject(exception);\r\n    }\r\n\r\n    function _progressed(value) {\r\n        return typeof progressed === \"function\" ? progressed(value) : value;\r\n    }\r\n\r\n    nextTick(function () {\r\n        self.promiseDispatch(function (value) {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n\r\n            deferred.resolve(_fulfilled(value));\r\n        }, \"when\", [function (exception) {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n\r\n            deferred.resolve(_rejected(exception));\r\n        }]);\r\n    });\r\n\r\n    // Progress propagator need to be attached in the current tick.\r\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\r\n        var newValue;\r\n        var threw = false;\r\n        try {\r\n            newValue = _progressed(value);\r\n        } catch (e) {\r\n            threw = true;\r\n            if (Q.onerror) {\r\n                Q.onerror(e);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        if (!threw) {\r\n            deferred.notify(newValue);\r\n        }\r\n    }]);\r\n\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Registers an observer on a promise.\r\n *\r\n * Guarantees:\r\n *\r\n * 1. that fulfilled and rejected will be called only once.\r\n * 2. that either the fulfilled callback or the rejected callback will be\r\n *    called, but not both.\r\n * 3. that fulfilled and rejected will not be called in this turn.\r\n *\r\n * @param value      promise or immediate reference to observe\r\n * @param fulfilled  function to be called with the fulfilled value\r\n * @param rejected   function to be called with the rejection exception\r\n * @param progressed function to be called on any progress notifications\r\n * @return promise for the return value from the invoked callback\r\n */\r\nQ.when = when;\r\nfunction when(value, fulfilled, rejected, progressed) {\r\n    return Q(value).then(fulfilled, rejected, progressed);\r\n}\r\n\r\nPromise.prototype.thenResolve = function (value) {\r\n    return this.then(function () { return value; });\r\n};\r\n\r\nQ.thenResolve = function (promise, value) {\r\n    return Q(promise).thenResolve(value);\r\n};\r\n\r\nPromise.prototype.thenReject = function (reason) {\r\n    return this.then(function () { throw reason; });\r\n};\r\n\r\nQ.thenReject = function (promise, reason) {\r\n    return Q(promise).thenReject(reason);\r\n};\r\n\r\n/**\r\n * If an object is not a promise, it is as \"near\" as possible.\r\n * If a promise is rejected, it is as \"near\" as possible too.\r\n * If it’s a fulfilled promise, the fulfillment value is nearer.\r\n * If it’s a deferred promise and the deferred has been resolved, the\r\n * resolution is \"nearer\".\r\n * @param object\r\n * @returns most resolved (nearest) form of the object\r\n */\r\n\r\n// XXX should we re-do this?\r\nQ.nearer = nearer;\r\nfunction nearer(value) {\r\n    if (isPromise(value)) {\r\n        var inspected = value.inspect();\r\n        if (inspected.state === \"fulfilled\") {\r\n            return inspected.value;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * @returns whether the given object is a promise.\r\n * Otherwise it is a fulfilled value.\r\n */\r\nQ.isPromise = isPromise;\r\nfunction isPromise(object) {\r\n    return isObject(object) &&\r\n        typeof object.promiseDispatch === \"function\" &&\r\n        typeof object.inspect === \"function\";\r\n}\r\n\r\nQ.isPromiseAlike = isPromiseAlike;\r\nfunction isPromiseAlike(object) {\r\n    return isObject(object) && typeof object.then === \"function\";\r\n}\r\n\r\n/**\r\n * @returns whether the given object is a pending promise, meaning not\r\n * fulfilled or rejected.\r\n */\r\nQ.isPending = isPending;\r\nfunction isPending(object) {\r\n    return isPromise(object) && object.inspect().state === \"pending\";\r\n}\r\n\r\nPromise.prototype.isPending = function () {\r\n    return this.inspect().state === \"pending\";\r\n};\r\n\r\n/**\r\n * @returns whether the given object is a value or fulfilled\r\n * promise.\r\n */\r\nQ.isFulfilled = isFulfilled;\r\nfunction isFulfilled(object) {\r\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\r\n}\r\n\r\nPromise.prototype.isFulfilled = function () {\r\n    return this.inspect().state === \"fulfilled\";\r\n};\r\n\r\n/**\r\n * @returns whether the given object is a rejected promise.\r\n */\r\nQ.isRejected = isRejected;\r\nfunction isRejected(object) {\r\n    return isPromise(object) && object.inspect().state === \"rejected\";\r\n}\r\n\r\nPromise.prototype.isRejected = function () {\r\n    return this.inspect().state === \"rejected\";\r\n};\r\n\r\n//// BEGIN UNHANDLED REJECTION TRACKING\r\n\r\n// This promise library consumes exceptions thrown in handlers so they can be\r\n// handled by a subsequent promise.  The exceptions get added to this array when\r\n// they are created, and removed when they are handled.  Note that in ES6 or\r\n// shimmed environments, this would naturally be a `Set`.\r\nvar unhandledReasons = [];\r\nvar unhandledRejections = [];\r\nvar unhandledReasonsDisplayed = false;\r\nvar trackUnhandledRejections = true;\r\nfunction displayUnhandledReasons() {\r\n    if (\r\n        !unhandledReasonsDisplayed &&\r\n        typeof window !== \"undefined\" &&\r\n        !window.Touch &&\r\n        window.console\r\n    ) {\r\n        console.warn(\"[Q] Unhandled rejection reasons (should be empty):\",\r\n                     unhandledReasons);\r\n    }\r\n\r\n    unhandledReasonsDisplayed = true;\r\n}\r\n\r\nfunction logUnhandledReasons() {\r\n    for (var i = 0; i < unhandledReasons.length; i++) {\r\n        var reason = unhandledReasons[i];\r\n        console.warn(\"Unhandled rejection reason:\", reason);\r\n    }\r\n}\r\n\r\nfunction resetUnhandledRejections() {\r\n    unhandledReasons.length = 0;\r\n    unhandledRejections.length = 0;\r\n    unhandledReasonsDisplayed = false;\r\n\r\n    if (!trackUnhandledRejections) {\r\n        trackUnhandledRejections = true;\r\n\r\n        // Show unhandled rejection reasons if Node exits without handling an\r\n        // outstanding rejection.  (Note that Browserify presently produces a\r\n        // `process` global without the `EventEmitter` `on` method.)\r\n        if (typeof process !== \"undefined\" && process.on) {\r\n            process.on(\"exit\", logUnhandledReasons);\r\n        }\r\n    }\r\n}\r\n\r\nfunction trackRejection(promise, reason) {\r\n    if (!trackUnhandledRejections) {\r\n        return;\r\n    }\r\n\r\n    unhandledRejections.push(promise);\r\n    if (reason && typeof reason.stack !== \"undefined\") {\r\n        unhandledReasons.push(reason.stack);\r\n    } else {\r\n        unhandledReasons.push(\"(no stack) \" + reason);\r\n    }\r\n    displayUnhandledReasons();\r\n}\r\n\r\nfunction untrackRejection(promise) {\r\n    if (!trackUnhandledRejections) {\r\n        return;\r\n    }\r\n\r\n    var at = array_indexOf(unhandledRejections, promise);\r\n    if (at !== -1) {\r\n        unhandledRejections.splice(at, 1);\r\n        unhandledReasons.splice(at, 1);\r\n    }\r\n}\r\n\r\nQ.resetUnhandledRejections = resetUnhandledRejections;\r\n\r\nQ.getUnhandledReasons = function () {\r\n    // Make a copy so that consumers can't interfere with our internal state.\r\n    return unhandledReasons.slice();\r\n};\r\n\r\nQ.stopUnhandledRejectionTracking = function () {\r\n    resetUnhandledRejections();\r\n    if (typeof process !== \"undefined\" && process.on) {\r\n        process.removeListener(\"exit\", logUnhandledReasons);\r\n    }\r\n    trackUnhandledRejections = false;\r\n};\r\n\r\nresetUnhandledRejections();\r\n\r\n//// END UNHANDLED REJECTION TRACKING\r\n\r\n/**\r\n * Constructs a rejected promise.\r\n * @param reason value describing the failure\r\n */\r\nQ.reject = reject;\r\nfunction reject(reason) {\r\n    var rejection = Promise({\r\n        \"when\": function (rejected) {\r\n            // note that the error has been handled\r\n            if (rejected) {\r\n                untrackRejection(this);\r\n            }\r\n            return rejected ? rejected(reason) : this;\r\n        }\r\n    }, function fallback() {\r\n        return this;\r\n    }, function inspect() {\r\n        return { state: \"rejected\", reason: reason };\r\n    });\r\n\r\n    // Note that the reason has not been handled.\r\n    trackRejection(rejection, reason);\r\n\r\n    return rejection;\r\n}\r\n\r\n/**\r\n * Constructs a fulfilled promise for an immediate reference.\r\n * @param value immediate reference\r\n */\r\nQ.fulfill = fulfill;\r\nfunction fulfill(value) {\r\n    return Promise({\r\n        \"when\": function () {\r\n            return value;\r\n        },\r\n        \"get\": function (name) {\r\n            return value[name];\r\n        },\r\n        \"set\": function (name, rhs) {\r\n            value[name] = rhs;\r\n        },\r\n        \"delete\": function (name) {\r\n            delete value[name];\r\n        },\r\n        \"post\": function (name, args) {\r\n            // Mark Miller proposes that post with no name should apply a\r\n            // promised function.\r\n            if (name === null || name === void 0) {\r\n                return value.apply(void 0, args);\r\n            } else {\r\n                return value[name].apply(value, args);\r\n            }\r\n        },\r\n        \"apply\": function (thisp, args) {\r\n            return value.apply(thisp, args);\r\n        },\r\n        \"keys\": function () {\r\n            return object_keys(value);\r\n        }\r\n    }, void 0, function inspect() {\r\n        return { state: \"fulfilled\", value: value };\r\n    });\r\n}\r\n\r\n/**\r\n * Converts thenables to Q promises.\r\n * @param promise thenable promise\r\n * @returns a Q promise\r\n */\r\nfunction coerce(promise) {\r\n    var deferred = defer();\r\n    nextTick(function () {\r\n        try {\r\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\r\n        } catch (exception) {\r\n            deferred.reject(exception);\r\n        }\r\n    });\r\n    return deferred.promise;\r\n}\r\n\r\n/**\r\n * Annotates an object such that it will never be\r\n * transferred away from this process over any promise\r\n * communication channel.\r\n * @param object\r\n * @returns promise a wrapping of that object that\r\n * additionally responds to the \"isDef\" message\r\n * without a rejection.\r\n */\r\nQ.master = master;\r\nfunction master(object) {\r\n    return Promise({\r\n        \"isDef\": function () {}\r\n    }, function fallback(op, args) {\r\n        return dispatch(object, op, args);\r\n    }, function () {\r\n        return Q(object).inspect();\r\n    });\r\n}\r\n\r\n/**\r\n * Spreads the values of a promised array of arguments into the\r\n * fulfillment callback.\r\n * @param fulfilled callback that receives variadic arguments from the\r\n * promised array\r\n * @param rejected callback that receives the exception if the promise\r\n * is rejected.\r\n * @returns a promise for the return value or thrown exception of\r\n * either callback.\r\n */\r\nQ.spread = spread;\r\nfunction spread(value, fulfilled, rejected) {\r\n    return Q(value).spread(fulfilled, rejected);\r\n}\r\n\r\nPromise.prototype.spread = function (fulfilled, rejected) {\r\n    return this.all().then(function (array) {\r\n        return fulfilled.apply(void 0, array);\r\n    }, rejected);\r\n};\r\n\r\n/**\r\n * The async function is a decorator for generator functions, turning\r\n * them into asynchronous generators.  Although generators are only part\r\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\r\n * errors in older engines.  This code should continue to work and will\r\n * in fact improve over time as the language improves.\r\n *\r\n * ES6 generators are currently part of V8 version 3.19 with the\r\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\r\n * for longer, but under an older Python-inspired form.  This function\r\n * works on both kinds of generators.\r\n *\r\n * Decorates a generator function such that:\r\n *  - it may yield promises\r\n *  - execution will continue when that promise is fulfilled\r\n *  - the value of the yield expression will be the fulfilled value\r\n *  - it returns a promise for the return value (when the generator\r\n *    stops iterating)\r\n *  - the decorated function returns a promise for the return value\r\n *    of the generator or the first rejected promise among those\r\n *    yielded.\r\n *  - if an error is thrown in the generator, it propagates through\r\n *    every following yield until it is caught, or until it escapes\r\n *    the generator function altogether, and is translated into a\r\n *    rejection for the promise returned by the decorated generator.\r\n */\r\nQ.async = async;\r\nfunction async(makeGenerator) {\r\n    return function () {\r\n        // when verb is \"send\", arg is a value\r\n        // when verb is \"throw\", arg is an exception\r\n        function continuer(verb, arg) {\r\n            var result;\r\n            if (hasES6Generators) {\r\n                try {\r\n                    result = generator[verb](arg);\r\n                } catch (exception) {\r\n                    return reject(exception);\r\n                }\r\n                if (result.done) {\r\n                    return result.value;\r\n                } else {\r\n                    return when(result.value, callback, errback);\r\n                }\r\n            } else {\r\n                // FIXME: Remove this case when SM does ES6 generators.\r\n                try {\r\n                    result = generator[verb](arg);\r\n                } catch (exception) {\r\n                    if (isStopIteration(exception)) {\r\n                        return exception.value;\r\n                    } else {\r\n                        return reject(exception);\r\n                    }\r\n                }\r\n                return when(result, callback, errback);\r\n            }\r\n        }\r\n        var generator = makeGenerator.apply(this, arguments);\r\n        var callback = continuer.bind(continuer, \"next\");\r\n        var errback = continuer.bind(continuer, \"throw\");\r\n        return callback();\r\n    };\r\n}\r\n\r\n/**\r\n * The spawn function is a small wrapper around async that immediately\r\n * calls the generator and also ends the promise chain, so that any\r\n * unhandled errors are thrown instead of forwarded to the error\r\n * handler. This is useful because it's extremely common to run\r\n * generators at the top-level to work with libraries.\r\n */\r\nQ.spawn = spawn;\r\nfunction spawn(makeGenerator) {\r\n    Q.done(Q.async(makeGenerator)());\r\n}\r\n\r\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\r\n/**\r\n * Throws a ReturnValue exception to stop an asynchronous generator.\r\n *\r\n * This interface is a stop-gap measure to support generator return\r\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\r\n * generators like Chromium 29, just use \"return\" in your generator\r\n * functions.\r\n *\r\n * @param value the return value for the surrounding generator\r\n * @throws ReturnValue exception with the value.\r\n * @example\r\n * // ES6 style\r\n * Q.async(function* () {\r\n *      var foo = yield getFooPromise();\r\n *      var bar = yield getBarPromise();\r\n *      return foo + bar;\r\n * })\r\n * // Older SpiderMonkey style\r\n * Q.async(function () {\r\n *      var foo = yield getFooPromise();\r\n *      var bar = yield getBarPromise();\r\n *      Q.return(foo + bar);\r\n * })\r\n */\r\nQ[\"return\"] = _return;\r\nfunction _return(value) {\r\n    throw new QReturnValue(value);\r\n}\r\n\r\n/**\r\n * The promised function decorator ensures that any promise arguments\r\n * are settled and passed as values (`this` is also settled and passed\r\n * as a value).  It will also ensure that the result of a function is\r\n * always a promise.\r\n *\r\n * @example\r\n * var add = Q.promised(function (a, b) {\r\n *     return a + b;\r\n * });\r\n * add(Q(a), Q(B));\r\n *\r\n * @param {function} callback The function to decorate\r\n * @returns {function} a function that has been decorated.\r\n */\r\nQ.promised = promised;\r\nfunction promised(callback) {\r\n    return function () {\r\n        return spread([this, all(arguments)], function (self, args) {\r\n            return callback.apply(self, args);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * sends a message to a value in a future turn\r\n * @param object* the recipient\r\n * @param op the name of the message operation, e.g., \"when\",\r\n * @param args further arguments to be forwarded to the operation\r\n * @returns result {Promise} a promise for the result of the operation\r\n */\r\nQ.dispatch = dispatch;\r\nfunction dispatch(object, op, args) {\r\n    return Q(object).dispatch(op, args);\r\n}\r\n\r\nPromise.prototype.dispatch = function (op, args) {\r\n    var self = this;\r\n    var deferred = defer();\r\n    nextTick(function () {\r\n        self.promiseDispatch(deferred.resolve, op, args);\r\n    });\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Gets the value of a property in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of property to get\r\n * @return promise for the property value\r\n */\r\nQ.get = function (object, key) {\r\n    return Q(object).dispatch(\"get\", [key]);\r\n};\r\n\r\nPromise.prototype.get = function (key) {\r\n    return this.dispatch(\"get\", [key]);\r\n};\r\n\r\n/**\r\n * Sets the value of a property in a future turn.\r\n * @param object    promise or immediate reference for object object\r\n * @param name      name of property to set\r\n * @param value     new value of property\r\n * @return promise for the return value\r\n */\r\nQ.set = function (object, key, value) {\r\n    return Q(object).dispatch(\"set\", [key, value]);\r\n};\r\n\r\nPromise.prototype.set = function (key, value) {\r\n    return this.dispatch(\"set\", [key, value]);\r\n};\r\n\r\n/**\r\n * Deletes a property in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of property to delete\r\n * @return promise for the return value\r\n */\r\nQ.del = // XXX legacy\r\nQ[\"delete\"] = function (object, key) {\r\n    return Q(object).dispatch(\"delete\", [key]);\r\n};\r\n\r\nPromise.prototype.del = // XXX legacy\r\nPromise.prototype[\"delete\"] = function (key) {\r\n    return this.dispatch(\"delete\", [key]);\r\n};\r\n\r\n/**\r\n * Invokes a method in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of method to invoke\r\n * @param value     a value to post, typically an array of\r\n *                  invocation arguments for promises that\r\n *                  are ultimately backed with `resolve` values,\r\n *                  as opposed to those backed with URLs\r\n *                  wherein the posted value can be any\r\n *                  JSON serializable object.\r\n * @return promise for the return value\r\n */\r\n// bound locally because it is used by other methods\r\nQ.mapply = // XXX As proposed by \"Redsandro\"\r\nQ.post = function (object, name, args) {\r\n    return Q(object).dispatch(\"post\", [name, args]);\r\n};\r\n\r\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.post = function (name, args) {\r\n    return this.dispatch(\"post\", [name, args]);\r\n};\r\n\r\n/**\r\n * Invokes a method in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of method to invoke\r\n * @param ...args   array of invocation arguments\r\n * @return promise for the return value\r\n */\r\nQ.send = // XXX Mark Miller's proposed parlance\r\nQ.mcall = // XXX As proposed by \"Redsandro\"\r\nQ.invoke = function (object, name /*...args*/) {\r\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\r\n};\r\n\r\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\r\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.invoke = function (name /*...args*/) {\r\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\r\n};\r\n\r\n/**\r\n * Applies the promised function in a future turn.\r\n * @param object    promise or immediate reference for target function\r\n * @param args      array of application arguments\r\n */\r\nQ.fapply = function (object, args) {\r\n    return Q(object).dispatch(\"apply\", [void 0, args]);\r\n};\r\n\r\nPromise.prototype.fapply = function (args) {\r\n    return this.dispatch(\"apply\", [void 0, args]);\r\n};\r\n\r\n/**\r\n * Calls the promised function in a future turn.\r\n * @param object    promise or immediate reference for target function\r\n * @param ...args   array of application arguments\r\n */\r\nQ[\"try\"] =\r\nQ.fcall = function (object /* ...args*/) {\r\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\r\n};\r\n\r\nPromise.prototype.fcall = function (/*...args*/) {\r\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\r\n};\r\n\r\n/**\r\n * Binds the promised function, transforming return values into a fulfilled\r\n * promise and thrown errors into a rejected one.\r\n * @param object    promise or immediate reference for target function\r\n * @param ...args   array of application arguments\r\n */\r\nQ.fbind = function (object /*...args*/) {\r\n    var promise = Q(object);\r\n    var args = array_slice(arguments, 1);\r\n    return function fbound() {\r\n        return promise.dispatch(\"apply\", [\r\n            this,\r\n            args.concat(array_slice(arguments))\r\n        ]);\r\n    };\r\n};\r\nPromise.prototype.fbind = function (/*...args*/) {\r\n    var promise = this;\r\n    var args = array_slice(arguments);\r\n    return function fbound() {\r\n        return promise.dispatch(\"apply\", [\r\n            this,\r\n            args.concat(array_slice(arguments))\r\n        ]);\r\n    };\r\n};\r\n\r\n/**\r\n * Requests the names of the owned properties of a promised\r\n * object in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @return promise for the keys of the eventually settled object\r\n */\r\nQ.keys = function (object) {\r\n    return Q(object).dispatch(\"keys\", []);\r\n};\r\n\r\nPromise.prototype.keys = function () {\r\n    return this.dispatch(\"keys\", []);\r\n};\r\n\r\n/**\r\n * Turns an array of promises into a promise for an array.  If any of\r\n * the promises gets rejected, the whole array is rejected immediately.\r\n * @param {Array*} an array (or promise for an array) of values (or\r\n * promises for values)\r\n * @returns a promise for an array of the corresponding values\r\n */\r\n// By Mark Miller\r\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\r\nQ.all = all;\r\nfunction all(promises) {\r\n    return when(promises, function (promises) {\r\n        var countDown = 0;\r\n        var deferred = defer();\r\n        array_reduce(promises, function (undefined, promise, index) {\r\n            var snapshot;\r\n            if (\r\n                isPromise(promise) &&\r\n                (snapshot = promise.inspect()).state === \"fulfilled\"\r\n            ) {\r\n                promises[index] = snapshot.value;\r\n            } else {\r\n                ++countDown;\r\n                when(\r\n                    promise,\r\n                    function (value) {\r\n                        promises[index] = value;\r\n                        if (--countDown === 0) {\r\n                            deferred.resolve(promises);\r\n                        }\r\n                    },\r\n                    deferred.reject,\r\n                    function (progress) {\r\n                        deferred.notify({ index: index, value: progress });\r\n                    }\r\n                );\r\n            }\r\n        }, void 0);\r\n        if (countDown === 0) {\r\n            deferred.resolve(promises);\r\n        }\r\n        return deferred.promise;\r\n    });\r\n}\r\n\r\nPromise.prototype.all = function () {\r\n    return all(this);\r\n};\r\n\r\n/**\r\n * Waits for all promises to be settled, either fulfilled or\r\n * rejected.  This is distinct from `all` since that would stop\r\n * waiting at the first rejection.  The promise returned by\r\n * `allResolved` will never be rejected.\r\n * @param promises a promise for an array (or an array) of promises\r\n * (or values)\r\n * @return a promise for an array of promises\r\n */\r\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\r\nfunction allResolved(promises) {\r\n    return when(promises, function (promises) {\r\n        promises = array_map(promises, Q);\r\n        return when(all(array_map(promises, function (promise) {\r\n            return when(promise, noop, noop);\r\n        })), function () {\r\n            return promises;\r\n        });\r\n    });\r\n}\r\n\r\nPromise.prototype.allResolved = function () {\r\n    return allResolved(this);\r\n};\r\n\r\n/**\r\n * @see Promise#allSettled\r\n */\r\nQ.allSettled = allSettled;\r\nfunction allSettled(promises) {\r\n    return Q(promises).allSettled();\r\n}\r\n\r\n/**\r\n * Turns an array of promises into a promise for an array of their states (as\r\n * returned by `inspect`) when they have all settled.\r\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\r\n * promises for values)\r\n * @returns {Array[State]} an array of states for the respective values.\r\n */\r\nPromise.prototype.allSettled = function () {\r\n    return this.then(function (promises) {\r\n        return all(array_map(promises, function (promise) {\r\n            promise = Q(promise);\r\n            function regardless() {\r\n                return promise.inspect();\r\n            }\r\n            return promise.then(regardless, regardless);\r\n        }));\r\n    });\r\n};\r\n\r\n/**\r\n * Captures the failure of a promise, giving an oportunity to recover\r\n * with a callback.  If the given promise is fulfilled, the returned\r\n * promise is fulfilled.\r\n * @param {Any*} promise for something\r\n * @param {Function} callback to fulfill the returned promise if the\r\n * given promise is rejected\r\n * @returns a promise for the return value of the callback\r\n */\r\nQ.fail = // XXX legacy\r\nQ[\"catch\"] = function (object, rejected) {\r\n    return Q(object).then(void 0, rejected);\r\n};\r\n\r\nPromise.prototype.fail = // XXX legacy\r\nPromise.prototype[\"catch\"] = function (rejected) {\r\n    return this.then(void 0, rejected);\r\n};\r\n\r\n/**\r\n * Attaches a listener that can respond to progress notifications from a\r\n * promise's originating deferred. This listener receives the exact arguments\r\n * passed to ``deferred.notify``.\r\n * @param {Any*} promise for something\r\n * @param {Function} callback to receive any progress notifications\r\n * @returns the given promise, unchanged\r\n */\r\nQ.progress = progress;\r\nfunction progress(object, progressed) {\r\n    return Q(object).then(void 0, void 0, progressed);\r\n}\r\n\r\nPromise.prototype.progress = function (progressed) {\r\n    return this.then(void 0, void 0, progressed);\r\n};\r\n\r\n/**\r\n * Provides an opportunity to observe the settling of a promise,\r\n * regardless of whether the promise is fulfilled or rejected.  Forwards\r\n * the resolution to the returned promise when the callback is done.\r\n * The callback can return a promise to defer completion.\r\n * @param {Any*} promise\r\n * @param {Function} callback to observe the resolution of the given\r\n * promise, takes no arguments.\r\n * @returns a promise for the resolution of the given promise when\r\n * ``fin`` is done.\r\n */\r\nQ.fin = // XXX legacy\r\nQ[\"finally\"] = function (object, callback) {\r\n    return Q(object)[\"finally\"](callback);\r\n};\r\n\r\nPromise.prototype.fin = // XXX legacy\r\nPromise.prototype[\"finally\"] = function (callback) {\r\n    callback = Q(callback);\r\n    return this.then(function (value) {\r\n        return callback.fcall().then(function () {\r\n            return value;\r\n        });\r\n    }, function (reason) {\r\n        // TODO attempt to recycle the rejection with \"this\".\r\n        return callback.fcall().then(function () {\r\n            throw reason;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Terminates a chain of promises, forcing rejections to be\r\n * thrown as exceptions.\r\n * @param {Any*} promise at the end of a chain of promises\r\n * @returns nothing\r\n */\r\nQ.done = function (object, fulfilled, rejected, progress) {\r\n    return Q(object).done(fulfilled, rejected, progress);\r\n};\r\n\r\nPromise.prototype.done = function (fulfilled, rejected, progress) {\r\n    var onUnhandledError = function (error) {\r\n        // forward to a future turn so that ``when``\r\n        // does not catch it and turn it into a rejection.\r\n        nextTick(function () {\r\n            makeStackTraceLong(error, promise);\r\n            if (Q.onerror) {\r\n                Q.onerror(error);\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n    };\r\n\r\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\r\n    var promise = fulfilled || rejected || progress ?\r\n        this.then(fulfilled, rejected, progress) :\r\n        this;\r\n\r\n    if (typeof process === \"object\" && process && process.domain) {\r\n        onUnhandledError = process.domain.bind(onUnhandledError);\r\n    }\r\n\r\n    promise.then(void 0, onUnhandledError);\r\n};\r\n\r\n/**\r\n * Causes a promise to be rejected if it does not get fulfilled before\r\n * some milliseconds time out.\r\n * @param {Any*} promise\r\n * @param {Number} milliseconds timeout\r\n * @param {String} custom error message (optional)\r\n * @returns a promise for the resolution of the given promise if it is\r\n * fulfilled before the timeout, otherwise rejected.\r\n */\r\nQ.timeout = function (object, ms, message) {\r\n    return Q(object).timeout(ms, message);\r\n};\r\n\r\nPromise.prototype.timeout = function (ms, message) {\r\n    var deferred = defer();\r\n    var timeoutId = setTimeout(function () {\r\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\r\n    }, ms);\r\n\r\n    this.then(function (value) {\r\n        clearTimeout(timeoutId);\r\n        deferred.resolve(value);\r\n    }, function (exception) {\r\n        clearTimeout(timeoutId);\r\n        deferred.reject(exception);\r\n    }, deferred.notify);\r\n\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Returns a promise for the given value (or promised value), some\r\n * milliseconds after it resolved. Passes rejections immediately.\r\n * @param {Any*} promise\r\n * @param {Number} milliseconds\r\n * @returns a promise for the resolution of the given promise after milliseconds\r\n * time has elapsed since the resolution of the given promise.\r\n * If the given promise rejects, that is passed immediately.\r\n */\r\nQ.delay = function (object, timeout) {\r\n    if (timeout === void 0) {\r\n        timeout = object;\r\n        object = void 0;\r\n    }\r\n    return Q(object).delay(timeout);\r\n};\r\n\r\nPromise.prototype.delay = function (timeout) {\r\n    return this.then(function (value) {\r\n        var deferred = defer();\r\n        setTimeout(function () {\r\n            deferred.resolve(value);\r\n        }, timeout);\r\n        return deferred.promise;\r\n    });\r\n};\r\n\r\n/**\r\n * Passes a continuation to a Node function, which is called with the given\r\n * arguments provided as an array, and returns a promise.\r\n *\r\n *      Q.nfapply(FS.readFile, [__filename])\r\n *      .then(function (content) {\r\n *      })\r\n *\r\n */\r\nQ.nfapply = function (callback, args) {\r\n    return Q(callback).nfapply(args);\r\n};\r\n\r\nPromise.prototype.nfapply = function (args) {\r\n    var deferred = defer();\r\n    var nodeArgs = array_slice(args);\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.fapply(nodeArgs).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Passes a continuation to a Node function, which is called with the given\r\n * arguments provided individually, and returns a promise.\r\n * @example\r\n * Q.nfcall(FS.readFile, __filename)\r\n * .then(function (content) {\r\n * })\r\n *\r\n */\r\nQ.nfcall = function (callback /*...args*/) {\r\n    var args = array_slice(arguments, 1);\r\n    return Q(callback).nfapply(args);\r\n};\r\n\r\nPromise.prototype.nfcall = function (/*...args*/) {\r\n    var nodeArgs = array_slice(arguments);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.fapply(nodeArgs).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Wraps a NodeJS continuation passing function and returns an equivalent\r\n * version that returns a promise.\r\n * @example\r\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\r\n * .then(console.log)\r\n * .done()\r\n */\r\nQ.nfbind =\r\nQ.denodeify = function (callback /*...args*/) {\r\n    var baseArgs = array_slice(arguments, 1);\r\n    return function () {\r\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\r\n        var deferred = defer();\r\n        nodeArgs.push(deferred.makeNodeResolver());\r\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\r\n        return deferred.promise;\r\n    };\r\n};\r\n\r\nPromise.prototype.nfbind =\r\nPromise.prototype.denodeify = function (/*...args*/) {\r\n    var args = array_slice(arguments);\r\n    args.unshift(this);\r\n    return Q.denodeify.apply(void 0, args);\r\n};\r\n\r\nQ.nbind = function (callback, thisp /*...args*/) {\r\n    var baseArgs = array_slice(arguments, 2);\r\n    return function () {\r\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\r\n        var deferred = defer();\r\n        nodeArgs.push(deferred.makeNodeResolver());\r\n        function bound() {\r\n            return callback.apply(thisp, arguments);\r\n        }\r\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\r\n        return deferred.promise;\r\n    };\r\n};\r\n\r\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\r\n    var args = array_slice(arguments, 0);\r\n    args.unshift(this);\r\n    return Q.nbind.apply(void 0, args);\r\n};\r\n\r\n/**\r\n * Calls a method of a Node-style object that accepts a Node-style\r\n * callback with a given array of arguments, plus a provided callback.\r\n * @param object an object that has the named method\r\n * @param {String} name name of the method of object\r\n * @param {Array} args arguments to pass to the method; the callback\r\n * will be provided by Q and appended to these arguments.\r\n * @returns a promise for the value or error\r\n */\r\nQ.nmapply = // XXX As proposed by \"Redsandro\"\r\nQ.npost = function (object, name, args) {\r\n    return Q(object).npost(name, args);\r\n};\r\n\r\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.npost = function (name, args) {\r\n    var nodeArgs = array_slice(args || []);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Calls a method of a Node-style object that accepts a Node-style\r\n * callback, forwarding the given variadic arguments, plus a provided\r\n * callback argument.\r\n * @param object an object that has the named method\r\n * @param {String} name name of the method of object\r\n * @param ...args arguments to pass to the method; the callback will\r\n * be provided by Q and appended to these arguments.\r\n * @returns a promise for the value or error\r\n */\r\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\r\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\r\nQ.ninvoke = function (object, name /*...args*/) {\r\n    var nodeArgs = array_slice(arguments, 2);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\r\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\r\nPromise.prototype.ninvoke = function (name /*...args*/) {\r\n    var nodeArgs = array_slice(arguments, 1);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * If a function would like to support both Node continuation-passing-style and\r\n * promise-returning-style, it can end its internal promise chain with\r\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\r\n * elects to use a nodeback, the result will be sent there.  If they do not\r\n * pass a nodeback, they will receive the result promise.\r\n * @param object a result (or a promise for a result)\r\n * @param {Function} nodeback a Node.js-style callback\r\n * @returns either the promise or nothing\r\n */\r\nQ.nodeify = nodeify;\r\nfunction nodeify(object, nodeback) {\r\n    return Q(object).nodeify(nodeback);\r\n}\r\n\r\nPromise.prototype.nodeify = function (nodeback) {\r\n    if (nodeback) {\r\n        this.then(function (value) {\r\n            nextTick(function () {\r\n                nodeback(null, value);\r\n            });\r\n        }, function (error) {\r\n            nextTick(function () {\r\n                nodeback(error);\r\n            });\r\n        });\r\n    } else {\r\n        return this;\r\n    }\r\n};\r\n\r\n// All code before this point will be filtered from stack traces.\r\nvar qEndingLine = captureLine();\r\n\r\nreturn Q;\r\n\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":60980}]],"length":60980,"saved":false}
