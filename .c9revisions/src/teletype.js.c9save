{"ts":1379214141853,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\"use strict\";\r\n\r\n// Chrome, Firefox, Opera 12+, IE 8+ (7 has no querySelector)\r\n(function ($) {\r\n    \r\n    var root = this,\r\n    \r\n        oldTeletype = root.Teletype,\r\n        \r\n        Teletype = function (element, text, delay, redraw, userFunction, undefined) {\r\n        \r\n        var el = (typeof element === \"object\" ? element : document.querySelector(element)),\r\n            div = document.createElement('div'),\r\n            innerText = document.body.textContent ? \"textContent\" : \"innerText\";\r\n    \r\n        delay = delay || 10,\r\n        redraw = (redraw !== undefined ? redraw : true);\r\n            \r\n        for (var i = 0, length = text.length; i < length; i++) {\r\n            (function (i) {\r\n                setTimeout(function () {\r\n                    div[innerText] += text[i];\r\n                    el.appendChild(div);\r\n                    if (redraw && i == length-1) el[innerText] = div[innerText];\r\n                    if (userFunction) userFunction.call(undefined, i, length);\r\n                }, delay * i);\r\n            })(i);\r\n        }\r\n    };\r\n    \r\n    \r\n    // Run Teletype in noConflict mode, \r\n    // returning the Teletype variable to its previous owner. \r\n    // Returns a reference to the Teletype object.\r\n    Teletype.prototype.noConflict = function () {\r\n        root.Teletype = oldTeletype;\r\n        return this;\r\n    };\r\n    \r\n    root.Teletype = Teletype;\r\n    \r\n}).call(this, jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":1423}]],"length":1423}
{"contributors":[],"silentsave":false,"ts":1379214120269,"patch":[[{"diffs":[[-1,"\"use strict\";\r\n\r\n"],[0,"// C"]],"start1":0,"start2":0,"length1":21,"length2":4}]],"length":1406,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379275822469,"patch":[[{"diffs":[[-1,"\"use strict\";\r\n\r\n"],[0,"// C"]],"start1":0,"start2":0,"length1":21,"length2":4},{"diffs":[[0,"ay || 10"],[-1,","],[1,";"],[0,"\r\n      "]],"start1":509,"start2":509,"length1":17,"length2":17},{"diffs":[[0,");\r\n        "],[1,"\r\n        \r\n    "],[0,"    \r\n      "]],"start1":574,"start2":574,"length1":24,"length2":40}]],"length":1422,"saved":false}
{"ts":1379275851426,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"console.log(typeof text, typeof delay, typeof redraw);"],[0,"\r\n        \r\n    "]],"start1":580,"start2":580,"length1":32,"length2":86}]],"length":1476,"saved":false}
{"ts":1379277036037,"patch":[[{"diffs":[[0,"ype,\r\n        \r\n"],[1,"        // Will type in 'element' the 'text' with 'delay'.\r\n        // Will 'redraw' the div by default as well as call\r\n        // 'userFunction' on every iteration (status update)\r\n        \r\n"],[0,"        Teletype"]],"start1":146,"start2":146,"length1":32,"length2":225}]],"length":1669,"saved":false}
{"ts":1379277110871,"patch":[[{"diffs":[[0,"ate)\r\n        \r\n"],[1,"        // The 0..100% status can be found with  parseFloat((index + 1) / length).toFixed(2) in 'userDefined'\r\n        // function that accepts arguments 'index' and 'length'\r\n        \r\n"],[0,"        Teletype"]],"start1":339,"start2":339,"length1":32,"length2":218}]],"length":1855,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379291276590,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        console.log(typeof text, typeof delay, typeof redraw);\r\n        \r\n"],[0,"    "]],"start1":963,"start2":963,"length1":82,"length2":8}]],"length":1781,"saved":false}
