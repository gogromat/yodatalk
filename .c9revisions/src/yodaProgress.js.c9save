{"ts":1379276182846,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function ($) {\r\n\r\n    var root = this,\r\n    \r\n        oldYodaProgress = root.YodaProgress;\r\n    \r\n    var getElementId = (function () {\r\n        var incrementingId = 0;\r\n        return function (element) {\r\n            if (!element.id) {\r\n                element.id = \"progress_id_\" + incrementingId++;\r\n            }\r\n            return element.id;\r\n        };\r\n    }());\r\n      \r\n    var hashCode = function (string) {\r\n        var hash = 0, \r\n            length = string.length,\r\n            char;\r\n        if (length == 0) return hash;\r\n        for (var i = 0; i < length; i++) {\r\n            char = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n        return hash.toString();\r\n    };\r\n      \r\n      \r\n    var getElementUniqueId = function(element) {\r\n        return hashCode(getElementId(element));  \r\n    };\r\n          \r\n    var YodaProgress = function (element) {\r\n    \r\n        if ($.isEmptyObject(element)) return;\r\n        \r\n        var elementId = getElementUniqueId(element);\r\n        \r\n        if (YodaProgress[elementId]) {\r\n            return YodaProgress[elementId];\r\n        } else {\r\n            YodaProgress[elementId] = new ElementProgress($(element));\r\n            return YodaProgress[elementId];\r\n        }\r\n    \r\n    };\r\n          \r\n    var ElementProgress = function (element, options) {\r\n        this.options = {\r\n            element : element,\r\n            progress : 0,\r\n            doneValue : 1,\r\n            isDone : false,\r\n            width: element.parent().width(),\r\n            extraWidth: 120,\r\n            doneCSSRule: {\r\n              \"background-image\": \"url('libs/img/yoda_flipped.png')\"\r\n            }\r\n        };\r\n        $.extend(this.options, options);\r\n    };\r\n    \r\n    ElementProgress.prototype.progress = function (progress) {\r\n        var self = this;\r\n        \r\n        if (progress > self.options.progress) {\r\n            // First time, show\r\n            if (self.options.progress == 0) {\r\n                self.options.element.show();\r\n            }\r\n            self.options.progress = progress;\r\n            if (progress >= self.options.doneValue) {\r\n                self.options.progress = self.options.doneValue;\r\n                self.options.isDone = true;\r\n                self.options.element.css(self.options.doneCSSRule);\r\n            }\r\n            self.updateCSSPosition();\r\n        }\r\n    };\r\n    ElementProgress.prototype.updateCSSPosition = function () {\r\n        var self = this;\r\n        self.options.element.css({\r\n            \"background-position\": self.getPosition() + \"px\"\r\n        });\r\n    };\r\n    \r\n    ElementProgress.prototype.getPosition = function () {\r\n        return ((this.options.width * this.options.progress)-this.options.extraWidth);\r\n    };\r\n    \r\n    ElementProgress.prototype.reset = function () {\r\n        var self = this;\r\n        self = new ElementProgress(self.options.element);\r\n    };\r\n    \r\n    ElementProgress.prototype.isDone = function () {\r\n        return this.options.isDone;  \r\n    };\r\n    ElementProgress.prototype.toggle = function (action) {\r\n        var action = action || \"hide\";\r\n        if (action === \"hide\") {\r\n            this.options.element.hide();\r\n        } else {\r\n            this.options.element.show();\r\n        }\r\n    };\r\n    \r\n        \r\n    // Run YodaProgress in noConflict mode, \r\n    // returning the YodaProgress variable to its previous owner. \r\n    // Returns a reference to the YodaProgress object.\r\n    YodaProgress.prototype.noConflict = function () {\r\n        root.YodaProgress = oldYodaProgress;\r\n        return this;\r\n    };\r\n    \r\n    root.YodaProgress = YodaProgress;\r\n}).call(this, jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":3725}]],"length":3725}
{"contributors":[],"silentsave":false,"ts":1379276201213,"patch":[[{"diffs":[[0,"gress;\r\n"],[1,"    \r\n"],[0,"}).call("]],"start1":3695,"start2":3695,"length1":16,"length2":22}]],"length":3731,"saved":false}
{"ts":1379276244616,"patch":[[{"diffs":[[0,"n (progress) {\r\n"],[1,"        \r\n"],[0,"        var self"]],"start1":1860,"start2":1860,"length1":32,"length2":42},{"diffs":[[0,"his;\r\n        \r\n"],[1,"        console.log('trying to progress');\r\n        \r\n"],[0,"        if (prog"]],"start1":1906,"start2":1906,"length1":32,"length2":86}]],"length":3795,"saved":false}
{"ts":1379277315532,"patch":[[{"diffs":[[0,"rogress'"],[1,", progress"],[0,");\r\n    "]],"start1":1954,"start2":1954,"length1":16,"length2":26}]],"length":3805,"saved":false}
{"ts":1379292333179,"patch":[[{"diffs":[[0," function () {\r\n"],[1,"        console.log(\"PROGRESS IS DONE\");\r\n"],[0,"        return t"]],"start1":3097,"start2":3097,"length1":32,"length2":74}]],"length":3847,"saved":false}
{"ts":1379292586696,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(\"PROGRESS IS DONE\");\r\n"],[0,"    "]],"start1":3109,"start2":3109,"length1":50,"length2":8}]],"length":3805,"saved":false}
{"ts":1379292592088,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        console.log('trying to progress', progress);\r\n        \r\n"],[0,"    "]],"start1":1918,"start2":1918,"length1":72,"length2":8}]],"length":3741,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379298413958,"patch":[[{"diffs":[[0,"unction (element"],[1,", options"],[0,") {\r\n    \r\n     "]],"start1":951,"start2":951,"length1":32,"length2":41},{"diffs":[[0,"element)"],[1,", options"],[0,");\r\n    "]],"start1":1271,"start2":1271,"length1":16,"length2":25}]],"length":3759,"saved":false}
